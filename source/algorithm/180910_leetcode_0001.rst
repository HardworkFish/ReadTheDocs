########
LeetCode
########

1.两数之和
===========

题目
------

给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。

*示例*

::
    
  给定 nums = [2, 7, 11, 15], target = 9
 
  因为 nums[0] + nums[1] = 2 + 7 = 9
  
  所以返回 [0, 1]

解题方案
------------

方法一：暴力法

::

    class Solution(object):
        def twoSum(self, nums, target):
            """
            :type nums: List[int]
             :type target: int
             :rtype: List[int]
            """
        for i in range(0,len(nums)):
            for j in range(i+1, len(nums)):
                sum = nums[i] + nums[j]
                if sum==target:
                    return i, j
                    break;
                else:
                    continue
      

复杂度分析：
-------------

* 时间复杂度：O(n^2)， 对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n) 的时间。因此时间复杂度为 O(n^2)。

* 空间复杂度：O(1)。


方法二：两遍哈希表

为了对运行时间复杂度进行优化，我们需要一种更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。

通过以空间换取速度的方式，我们可以将查找时间从 O(n) 降低到 O(1)。哈希表正是为此目的而构建的，它支持以 近似 恒定的时间进行快速查找。用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到 O(n)。但只要仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为 O(1)。

一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target - nums[i]）是否存在于表中。注意，该目标元素不能是 nums[i] 本身！


:: 

    class Solution(object):
        def twoSum(self, nums, target):
            """
            :type nums: List[int]
            :type target: int
            :rtype: List[int]
            """
            n = len(nums)
            d = {}
            for i in range(n):
                a = target - nums[i]
                if nums[i] in d:
                    return d[nums[i]], i
                else:
                    d[a] = i

复杂度分析：
-------------

* 时间复杂度：O(n)， 我们把包含有 n 个元素的列表遍历两次。由于哈希表将查找时间缩短到 O(1) ，所以时间复杂度为 O(n)。

* 空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 n 个元素。



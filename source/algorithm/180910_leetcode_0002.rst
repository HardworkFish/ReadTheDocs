#########
LeetCode
#########

2. 两数相加
===========

给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

示例：

::
     
    输入：(2 -> 4 -> 3) + (5 -> 6 -> 4) 
    输出：7 -> 0 -> 8
    原因：342 + 465 = 807



方法：初等数学

我们使用变量来跟踪进位，并从包含最低有效位的表头开始模拟逐位相加的过程。

.. image:: https://leetcode-cn.com/problems/add-two-numbers/Figures/2/2_add_two_numbers.svg

图1，对两数相加方法的可视化: 342 + 465 = 807342+465=807， 每个结点都包含一个数字，并且数字按位逆序存储。

算法

就像你在纸上计算两个数字的和那样，我们首先从最低有效位也就是列表 l1 和 l2 的表头开始相加。由于每位数字都应当处于 0 …9 的范围内，我们计算两个数字的和时可能会出现“溢出”。例如，5 + 7 = 12。在这种情况下，我们会将当前位的数值设置为 2，并将进位 carry = 1 带入下一次迭代。进位 carry 必定是 0 或 1，这是因为两个数字相加（考虑到进位）可能出现的最大和为 9 + 9 + 1 = 19。


伪代码如下：

* 将当前结点初始化为返回列表的哑结点。
* 将进位 carry 初始化为 0。
* 将 p和 q 分别初始化为列表 l1 和 l2 的头部。
* 遍历列表 l1 和 l2 直至到达它们的尾端。
    * 将 x 设为结点 p 的值。如果 p 已经到达 l1 的末尾，则将其值设置为 0。
    * 将 y 设为结点 q 的值。如果 q 已经到达 l2 的末尾，则将其值设置为 0。
    * 设定 sum = x + y + carry。
    * 更新进位的值，carry = sum / 10。
    * 创建一个数值为 (sum mod 10) 的新结点，并将其设置为当前结点的下一个结点，然后将当前结点前进到下一个结点。
    * 同时，将 p 和 q 前进到下一个结点。
* 检查 carry = 1 是否成立，如果成立，则向返回列表追加一个含有数字 1 的新结点。

返回哑结点的下一个结点。如果没有哑结点，则必须编写额外的条件语句来初始化表头的值。

实现
^^^^^

:: 

    # Definition for singly-linked list. 
    # class ListNode(object):
    #     def __init__(self, x):
    #         self.val = x
    #         self.next = None

    class Solution(object):
        def addTwoNumbers(self, l1, l2):
            """
            :type l1: ListNode
            :type l2: ListNode
            :rtype: ListNode
           """
            ans = ListNode(0)
            temp = ans
            temp_sum = 0
        
            while l1 or l2 or temp_sum:
                if(l1 != None):
                    temp_sum = l1.val + temp_sum
                    l1 = l1.next
                if(l2 != None):
                    temp_sum = temp_sum + l2.val
                    l2 = l2.next
                
                temp_sum, temp.val = divmod(temp_sum, 10)
                # 直到没有进位，同时节点位空，跳出循环                                       
                if l1 == None and l2 == None and temp_sum ==0: 
                    break
            
                temp.next = ListNode(0)
                temp = temp.next
            return ans
    




